"use strict";

/**
 * Usage:
 *
 * // gatsby-config.js
 * plugins: [
 *  `gatsby-plugin-stylus`,
 * ],
 *
 * // Usage with options:
 *
 * // gatsby-config.js
 * plugins: [
 *   {
 *     resolve: `gatsby-plugin-stylus`,
 *     options: {
 *       use: [],
 *       import: []
 *     },
 *   },
 * ],
 */
var _require = require(`gatsby-1-config-extract-plugin`),
    extractTextPlugin = _require.extractTextPlugin;

var _require2 = require(`gatsby-1-config-css-modules`),
    cssModulesConfig = _require2.cssModulesConfig;

exports.modifyWebpackConfig = function (_ref) {
  var config = _ref.config,
      stage = _ref.stage;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Pass in stylus options regardless of stage.
  if (Array.isArray(options.use)) {
    config.merge(function (current) {
      current.stylus = {
        use: options.use
      };
      return current;
    });
  } else if (options.use) {
    throw new Error(`gatsby-plugin-stylus "use" option passed with ${options.use}. Pass an array of stylus plugins instead`);
  }
  if (Array.isArray(options.import)) {
    config.merge(function (current) {
      current.stylus = {
        import: options.import
      };
      return current;
    });
  } else if (options.import) {
    throw new Error(`gatsby-plugin-stylus "import" option passed with ${options.import}. Pass an array of filenames instead`);
  }

  var stylusFiles = /\.styl$/;
  var stylusModulesFiles = /\.module\.styl$/;

  switch (stage) {
    case `develop`:
      {
        config.loader(`stylus`, {
          test: stylusFiles,
          exclude: stylusModulesFiles,
          loaders: [`style`, `css`, `postcss`, `stylus`]
        });
        config.loader(`stylusModules`, {
          test: stylusModulesFiles,
          loaders: [`style`, cssModulesConfig(stage), `postcss`, `stylus`]
        });
        return config;
      }

    case `build-css`:
      {
        config.loader(`stylus`, {
          test: stylusFiles,
          exclude: stylusModulesFiles,
          loader: extractTextPlugin(stage).extract(`style`, [`css?minimize`, `postcss`, `stylus`])
        });
        config.loader(`stylusModules`, {
          test: stylusModulesFiles,
          loader: extractTextPlugin(stage).extract(`style`, [cssModulesConfig(stage), `postcss`, `stylus`])
        });
        return config;
      }

    case `develop-html`:
    case `build-html`:
      {
        var moduleLoader = extractTextPlugin(stage).extract(`style`, [cssModulesConfig(stage), `postcss`, `stylus`]);

        config.loader(`stylus`, {
          test: stylusFiles,
          exclude: stylusModulesFiles,
          loader: `null`
        });
        config.loader(`stylusModules`, {
          test: stylusModulesFiles,
          loader: moduleLoader
        });
        return config;
      }

    case `build-javascript`:
      {
        var _moduleLoader = extractTextPlugin(stage).extract(`style`, [cssModulesConfig(stage), `stylus`]);
        config.loader(`stylus`, {
          test: stylusFiles,
          exclude: stylusModulesFiles,
          loader: `null`
        });
        config.loader(`stylusModules`, {
          test: stylusModulesFiles,
          loader: _moduleLoader
        });

        return config;
      }

    default:
      {
        return config;
      }
  }
};